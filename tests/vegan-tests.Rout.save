
R Under development (unstable) (2016-01-29 r70039) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### vegan-tests: unit tests for vegan functions
> 
> ### This file contains unit tests for vegan functions. This file is
> ### run in R CMD check and its results are compared against previously
> ### saved results in vegan-tests.Rout.save. If you change tests, you
> ### must generate new vegan-tests.Rout.save in this directory.
> 
> ### The current plan is that tests/ are not included in the CRAN
> ### release, but only in the development versin of vegan in R-Forge.
> 
> ### The tests here are not intended for human reading. The tests need
> ### not be ecological or biologically meaningful, but they are only
> ### intended for testing strange arguments, protect against
> ### regressions and test correctness of results.
> 
> ### The tests are in a single file and you should clean work space
> ### after the unit test. You should set random number seed (if needed)
> ### for comparison against vegan-tests.Rout.save, and you should
> ### remove the seed after the unit test. If possible, avoid very long
> ### lasting tests.
> 
> ###<--- BEGIN TESTS --->
> suppressPackageStartupMessages(require(vegan))
> ###<--- BEGIN anova.cca test --->
> ### anova.cca tests: should work with (1) subset, (2) missing values,
> ### (3) with functions of variables poly(A1,2), (4) variables in data
> ### frame attached or in data=, or (5) in working environment
> set.seed(4711)
> data(dune)
> data(dune.env)
> df <- dune.env
> df$Management[c(1,5)] <- NA
> ## formula
> fla <- as.formula("dune ~ Management + poly(A1, 2) + spno")
> ### variable in the .GlobalEnv
> spno <- specnumber(dune)
> ### data= argument
> ## cca/rda
> m <-  cca(fla, data=df,  na.action=na.exclude,  subset = Use != "Pasture" & spno > 7)
> anova(m, permutations=99)
Permutation test for cca under reduced model
Permutation: free
Number of permutations: 99

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
         Df ChiSquare      F Pr(>F)  
Model     6   1.25838 1.3106   0.07 .
Residual  5   0.80011                
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> ## vegan 2.1-40 cannot handle missing data in next two
> ##anova(m, by="term", permutations=99)
> ##anova(m, by="margin", permutations=99)
> anova(m, by="axis", permutations=99)
Permutation test for cca under reduced model
Marginal tests for axes
Permutation: free
Number of permutations: 99

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = object$subset)
         Df ChiSquare      F Pr(>F)   
CCA1      1   0.46993 2.9366   0.01 **
CCA2      1   0.26217 1.6384   0.15   
CCA3      1   0.19308 1.2066   0.29   
CCA4      1   0.18345 1.1464   0.37   
CCA5      1   0.08871 0.5544   0.77   
CCA6      1   0.06104 0.3815   0.90   
Residual  5   0.80011                 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> ## capscale
> p <- capscale(fla, data=df, na.action=na.exclude, subset = Use != "Pasture" & spno > 7)
> anova(p, permutations=99)
Permutation test for capscale under reduced model
Permutation: free
Number of permutations: 99

Model: capscale(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
         Df Variance      F Pr(>F)  
Model     6   59.582 1.6462   0.04 *
Residual  5   30.160                
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> ## vegan 2.1-40 cannot handle missing data in next two
> ##anova(p, by="term", permutations=99)
> ##anova(p, by="margin", permutations=99)
> anova(p, by="axis", permutations=99)
Permutation test for capscale under reduced model
Marginal tests for axes
Permutation: free
Number of permutations: 99

Model: capscale(formula = dune ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = object$subset)
         Df Variance      F Pr(>F)  
CAP1      1  25.0252 4.1487   0.03 *
CAP2      1  15.8759 2.6319   0.07 .
CAP3      1   8.0942 1.3419   0.25  
CAP4      1   5.0675 0.8401   0.64  
CAP5      1   3.5671 0.5914   0.85  
CAP6      1   1.9520 0.3236   0.96  
Residual  5  30.1605                
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> ## see that capscale can be updated and also works with 'dist' input
> dis <- vegdist(dune)
> p <- update(p, dis ~ .)
> anova(p, permutations=99)
Permutation test for capscale under reduced model
Permutation: free
Number of permutations: 99

Model: capscale(formula = dis ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = Use != "Pasture" & spno > 7)
         Df SumOfSqs      F Pr(>F)
Model     6  1.52798 1.6548   0.11
Residual  5  0.76948              
> ## vegan 2.1-40 cannot handle missing data in next two
> ##anova(p, by="term", permutations=99)
> ##anova(p, by="margin", permutations=99)
> anova(p, by="axis", permutations=99)
imaginary variation was discarded
Permutation test for capscale under reduced model
Marginal tests for axes
Permutation: free
Number of permutations: 99

Model: capscale(formula = dis ~ Management + poly(A1, 2) + spno, data = df, na.action = na.exclude, subset = object$subset)
         Df SumOfSqs      F Pr(>F)  
CAP1      1  0.77834 4.9533   0.02 *
CAP2      1  0.45691 2.9078   0.03 *
CAP3      1  0.14701 0.9355   0.50  
CAP4      1  0.11879 0.7560   0.65  
CAP5      1  0.04213 0.2681   0.98  
CAP6      1  0.00522 0.0332   1.00  
Residual  5  0.76948                
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> ### attach()ed data frame instead of data=
> attach(df)
> q <- cca(fla, na.action = na.omit, subset = Use != "Pasture" & spno > 7)
> anova(q, permutations=99)
Permutation test for cca under reduced model
Permutation: free
Number of permutations: 99

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, na.action = na.omit, subset = Use != "Pasture" & spno > 7)
         Df ChiSquare      F Pr(>F)
Model     6   1.25838 1.3106   0.12
Residual  5   0.80011              
> ## commented tests below fail in vegan 2.1-40 because number of
> ## observations changes
> ##anova(q, by="term", permutations=99) 
> ##anova(q, by="margin", permutations=99)
> anova(q, by="axis", permutations=99)
Permutation test for cca under reduced model
Marginal tests for axes
Permutation: free
Number of permutations: 99

Model: cca(formula = dune ~ Management + poly(A1, 2) + spno, na.action = na.omit, subset = object$subset)
         Df ChiSquare      F Pr(>F)  
CCA1      1   0.46993 2.9366   0.03 *
CCA2      1   0.26217 1.6384   0.20  
CCA3      1   0.19308 1.2066   0.34  
CCA4      1   0.18345 1.1464   0.33  
CCA5      1   0.08871 0.5544   0.69  
CCA6      1   0.06104 0.3815   0.89  
Residual  5   0.80011                
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> ### Check that constrained ordination functions can be embedded.
> ### The data.frame 'df' is still attach()ed.
> foo <- function(bar, Y, X, ...)
+ {
+     bar <- match.fun(bar)
+     bar(Y ~ X, ...)
+ }
> foo("cca", dune, Management, na.action = na.omit)
Call: cca(formula = Y ~ X, na.action = ..1)

              Inertia Proportion Rank
Total          2.0949     1.0000     
Constrained    0.6236     0.2977    3
Unconstrained  1.4713     0.7023   14
Inertia is mean squared contingency coefficient 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
   CCA1    CCA2    CCA3 
0.31573 0.20203 0.10584 

Eigenvalues for unconstrained axes:
   CA1    CA2    CA3    CA4    CA5    CA6    CA7    CA8    CA9   CA10   CA11 
0.4478 0.1910 0.1788 0.1409 0.1202 0.0949 0.0732 0.0570 0.0531 0.0448 0.0312 
  CA12   CA13   CA14 
0.0181 0.0104 0.0098 

> foo("rda", dune, Management, na.action = na.omit)
Call: rda(formula = Y ~ X, na.action = ..1)

              Inertia Proportion Rank
Total         85.1176     1.0000     
Constrained   32.7765     0.3851    3
Unconstrained 52.3412     0.6149   14
Inertia is variance 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3 
15.956 13.621  3.199 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8    PC9   PC10   PC11 
14.893  9.136  6.042  5.674  3.638  2.865  2.504  1.968  1.888  1.239  0.959 
  PC12   PC13   PC14 
 0.779  0.501  0.255 

> foo("capscale", dune, Management, dist="jaccard", na.action = na.omit)
Call: bar(formula = Y ~ X, distance = "jaccard", na.action = ..2)

              Inertia Proportion Rank
Total          5.1432     1.0000     
Constrained    1.6453     0.3199    3
Unconstrained  3.4979     0.6801   14
Inertia is squared Jaccard distance 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
  CAP1   CAP2   CAP3 
0.8504 0.6047 0.1902 

Eigenvalues for unconstrained axes:
  MDS1   MDS2   MDS3   MDS4   MDS5   MDS6   MDS7   MDS8   MDS9  MDS10  MDS11 
1.0474 0.4406 0.4386 0.4054 0.2847 0.1947 0.1546 0.1506 0.0957 0.0935 0.0761 
 MDS12  MDS13  MDS14 
0.0603 0.0436 0.0120 

> foo("capscale", vegdist(dune), Management, na.action = na.omit)
Call: bar(formula = Y ~ X, na.action = ..1)

              Inertia Proportion Eigenvals Rank
Total          3.7652     1.0000    3.9493     
Constrained    1.4179     0.3766    1.4456    3
Unconstrained  2.3473     0.6234    2.5037   13
Imaginary                          -0.1841    4
Inertia is squared Bray distance 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
  CAP1   CAP2   CAP3 
0.7910 0.5497 0.1050 

Eigenvalues for unconstrained axes:
  MDS1   MDS2   MDS3   MDS4   MDS5   MDS6   MDS7   MDS8   MDS9  MDS10  MDS11 
1.0756 0.3691 0.3349 0.2695 0.1651 0.0931 0.0726 0.0673 0.0286 0.0174 0.0093 
 MDS12  MDS13 
0.0011 0.0001 

> foo("capscale", dune, Management, na.action = na.omit) ## fails in 2.2-1
Call: bar(formula = Y ~ X, na.action = ..1)

              Inertia Proportion Rank
Total         85.1176     1.0000     
Constrained   32.7765     0.3851    3
Unconstrained 52.3412     0.6149   14
Inertia is mean squared Euclidean distance 
2 observations deleted due to missingness 

Eigenvalues for constrained axes:
  CAP1   CAP2   CAP3 
15.956 13.621  3.199 

Eigenvalues for unconstrained axes:
  MDS1   MDS2   MDS3   MDS4   MDS5   MDS6   MDS7   MDS8   MDS9  MDS10  MDS11 
14.893  9.136  6.042  5.674  3.638  2.865  2.504  1.968  1.888  1.239  0.959 
 MDS12  MDS13  MDS14 
 0.779  0.501  0.255 

> ###
> detach(df)
> ### Check that statistics match in partial constrained ordination
> m <- cca(dune ~ A1 + Moisture + Condition(Management), dune.env, subset = A1 > 3)
> tab <- anova(m, by = "axis", permutations = 99)
> m
Call: cca(formula = dune ~ A1 + Moisture + Condition(Management), data
= dune.env, subset = A1 > 3)

              Inertia Proportion Rank
Total          2.0976     1.0000     
Conditional    0.6251     0.2980    3
Constrained    0.5555     0.2648    4
Unconstrained  0.9170     0.4372   10
Inertia is mean squared contingency coefficient 

Eigenvalues for constrained axes:
   CCA1    CCA2    CCA3    CCA4 
0.27109 0.14057 0.08761 0.05624 

Eigenvalues for unconstrained axes:
    CA1     CA2     CA3     CA4     CA5     CA6     CA7     CA8     CA9    CA10 
0.31042 0.13634 0.11974 0.09408 0.07763 0.06425 0.04449 0.02925 0.02785 0.01299 

> tab
Permutation test for cca under reduced model
Marginal tests for axes
Permutation: free
Number of permutations: 99

Model: cca(formula = dune ~ A1 + Moisture + Condition(Management), data = dune.env, subset = object$subset)
         Df ChiSquare      F Pr(>F)  
CCA1      1   0.27109 2.9561   0.04 *
CCA2      1   0.14057 1.5329   0.21  
CCA3      1   0.08761 0.9553   0.72  
CCA4      1   0.05624 0.6132   0.97  
Residual 10   0.91705                
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> all.equal(tab[,2], c(m$CCA$eig, m$CA$tot.chi), check.attributes=FALSE)
[1] TRUE
> tab[nrow(tab),1] == m$CA$rank
[1] TRUE
> ## clean-up
> rm(df, spno, fla, m, p, q, tab, dis, foo, .Random.seed)
> ### <--- END anova.cca test --->
> 
> ### Sven Neulinger <sneulinger@ifam.uni-kiel.de> reported failures in
> ### partial analysis which (mostly) were fixed in r2087. Below his test.
> 
> set.seed(4711)
> X <- matrix(rnorm(30*6), 30, 6)
> 
> A <- factor(rep(rep(c("a","b"), each=3),5))
> B <- factor(rep(c("a","b","c"), 10))
> ## Sven Neulinger's tests failed still in 2.2-1, now due to look-up
> ## order: function stats::C was found before matrix 'C'. The test was
> ## OK when non-function name was used ('CC').
> C <- factor(rep(c(1:5), each=6))
> 
> ## partial db-RDA
> cap.model.cond <- capscale(X ~ A + B + Condition(C))
> anova(cap.model.cond, by="axis", strata=C)  # -> error pre r2287
Permutation test for capscale under reduced model
Marginal tests for axes
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: capscale(formula = X ~ A + B + Condition(C))
         Df Variance      F Pr(>F)
CAP1      1   0.2682 1.3075  0.242
CAP2      1   0.0685 0.3339  0.921
CAP3      1   0.0455 0.2217  0.966
Residual 22   4.5130              
> anova(cap.model.cond, by="terms", strata=C)  # -> error pre r2287
Permutation test for capscale under reduced model
Terms added sequentially (first to last)
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: capscale(formula = X ~ A + B + Condition(C))
         Df Variance      F Pr(>F)
A         1   0.1316 0.6415  0.680
B         2   0.2506 0.6108  0.824
Residual 22   4.5130              
> 
> ## db-RDA without conditional factor
> cap.model <- capscale(X ~ A + B)
> anova(cap.model, by="axis", strata=C)  # -> no error
Permutation test for capscale under reduced model
Marginal tests for axes
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: capscale(formula = X ~ A + B)
         Df Variance      F Pr(>F)
CAP1      1   0.2682 1.3267  0.240
CAP2      1   0.0685 0.3388  0.913
CAP3      1   0.0455 0.2249  0.964
Residual 26   5.2565              
> anova(cap.model, by="terms", strata=C)  # -> no error
Permutation test for capscale under reduced model
Terms added sequentially (first to last)
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: capscale(formula = X ~ A + B)
         Df Variance      F Pr(>F)
A         1   0.1316 0.6509  0.693
B         2   0.2506 0.6198  0.829
Residual 26   5.2565              
> 
> # partial RDA
> rda.model.cond <- rda(X ~ A + B + Condition(C))
> anova(rda.model.cond, by="axis", strata=C)  # -> no error
Permutation test for rda under reduced model
Marginal tests for axes
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: rda(formula = X ~ A + B + Condition(C))
         Df Variance      F Pr(>F)
RDA1      1   0.2682 1.3075  0.286
RDA2      1   0.0685 0.3339  0.921
RDA3      1   0.0455 0.2217  0.963
Residual 22   4.5130              
> anova(rda.model.cond, by="terms", strata=C)  # -> error pre r2287
Permutation test for rda under reduced model
Terms added sequentially (first to last)
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: rda(formula = X ~ A + B + Condition(C))
         Df Variance      F Pr(>F)
A         1   0.1316 0.6415  0.669
B         2   0.2506 0.6108  0.827
Residual 22   4.5130              
> 
> # RDA without conditional factor
> rda.model <- rda(X ~ A + B)
> anova(rda.model, by="axis", strata=C)  # -> no error
Permutation test for rda under reduced model
Marginal tests for axes
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: rda(formula = X ~ A + B)
         Df Variance      F Pr(>F)
RDA1      1   0.2682 1.3267  0.258
RDA2      1   0.0685 0.3388  0.898
RDA3      1   0.0455 0.2249  0.971
Residual 26   5.2565              
> anova(rda.model, by="terms", strata=C)  # -> no error
Permutation test for rda under reduced model
Terms added sequentially (first to last)
Blocks:  strata 
Permutation: free
Number of permutations: 999

Model: rda(formula = X ~ A + B)
         Df Variance      F Pr(>F)
A         1   0.1316 0.6509  0.695
B         2   0.2506 0.6198  0.820
Residual 26   5.2565              
> ## clean.up
> rm(X, A, B, C, cap.model.cond, cap.model, rda.model.cond, rda.model)
> ### end Sven Neulinger's tests
> 
> ### Benedicte Bachelot informed us that several anova.cca* functions
> ### failed if community data name was the same as a function name: the
> ### function name was found first, and used instead ofa data. This
> ### seems to be related to the same problem that Sven Neulinger
> ### communicated, and his examples still faile if Condition or strata
> ### are function names. However, the following examples that failed
> ### should work now:
> 
> set.seed(4711)
> cca <- dune
> m <- cca(cca ~ ., dune.env)
> anova(m, by="term")
Permutation test for cca under reduced model
Terms added sequentially (first to last)
Permutation: free
Number of permutations: 999

Model: cca(formula = cca ~ A1 + Moisture + Management + Use + Manure, data = dune.env)
           Df ChiSquare      F Pr(>F)   
A1          1   0.22476 2.5704  0.010 **
Moisture    3   0.51898 1.9783  0.008 **
Management  3   0.39543 1.5074  0.064 . 
Use         2   0.10910 0.6238  0.905   
Manure      3   0.25490 0.9717  0.493   
Residual    7   0.61210                 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> m <- capscale(cca ~ ., dune.env)
> anova(m, by="term")
Permutation test for capscale under reduced model
Terms added sequentially (first to last)
Permutation: free
Number of permutations: 999

Model: capscale(formula = cca ~ A1 + Moisture + Management + Use + Manure, data = dune.env)
           Df Variance      F Pr(>F)   
A1          1   8.1148 2.7156  0.008 **
Moisture    3  21.6497 2.4150  0.008 **
Management  3  19.1153 2.1323  0.009 **
Use         2   4.7007 0.7865  0.730   
Manure      3   9.6257 1.0737  0.377   
Residual    7  20.9175                 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> rm(m, cca)
> 
> ### end Benedicte Bachelot tests
> 
> ### Richard Telford tweeted this example on 23/2/2015. Fails in 2.2-1,
> ### but should work now. Also issue #100 in github.com/vegandevs/vegan.
> set.seed(4711)
> data(dune, dune.env)
> foo <- function(x, env) {
+     m <- rda(x ~ Manure + A1, data = env)
+     anova(m, by = "margin")
+ }
> out <- lapply(dune, foo, env = dune.env)
> out$Poatriv
Permutation test for rda under reduced model
Marginal effects of terms
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Manure + A1, data = env)
         Df Variance      F Pr(>F)   
Manure    4   4.7257 5.7006  0.009 **
A1        1   0.0153 0.0736  0.783   
Residual 14   2.9014                 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> rm(foo, out)
> ### end Richard Telford test
> 
> 
> ### nestednodf: test case by Daniel Spitale in a comment to News on
> ### the release of vegan 1.17-6 in vegan.r-forge.r-project.org.
> x <- c(1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0)
> m1 <- matrix(x, nrow=5, ncol=5, byrow=FALSE)# as in Fig 2 Almeida-Neto et al 2008.
> (nodf1 <- nestednodf(m1, order = FALSE, weighted = FALSE))
N columns  : 53.33333 
N rows     : 63.33333 
NODF       : 58.33333 
Matrix fill: 0.56 
> ## Now the same matrix but with abundance data
> x <- c(5,0,2,1,1,4,1,1,0,0,0,7,1,1,0,3,1,0,0,0,9,1,0,0,0)
> m <- matrix(x, nrow=5, ncol=5, byrow=FALSE)
> (nodfq <- nestednodf(m, order = FALSE, weighted = FALSE))
N columns  : 53.33333 
N rows     : 63.33333 
NODF       : 58.33333 
Matrix fill: 0.56 
> identical(nodf1, nodfq)
[1] TRUE
> rm(x, m, m1, nodfq, nodf1)
> ### end nestednodf
> 
> ### envfit & plot.envfit: latter failed if na.action resulted in only
> ### observation with a given factor level was removed. plot.envfit would
> ### fail with error about too long subscript
> ### fixed case where data presented to envfit also has extraneous levels
> data(dune)
> data(dune.env)
> ## add a new level to one of the factors
> levels(dune.env$Management) <- c(levels(dune.env$Management), "foo")
> ## fit nMDS and envfit
> set.seed(1)
> mod <- metaMDS(dune)
Run 0 stress 0.1192678 
Run 1 stress 0.1886532 
Run 2 stress 0.1192678 
... New best solution
... Procrustes: rmse 4.497004e-05  max resid 0.0001297349 
... Similar to previous best
Run 3 stress 0.1192678 
... New best solution
... Procrustes: rmse 1.801542e-05  max resid 5.078152e-05 
... Similar to previous best
Run 4 stress 0.1183186 
... New best solution
... Procrustes: rmse 0.02025988  max resid 0.06488321 
Run 5 stress 0.1192685 
Run 6 stress 0.1939202 
Run 7 stress 0.1808919 
Run 8 stress 0.1183186 
... Procrustes: rmse 1.538285e-05  max resid 4.789705e-05 
... Similar to previous best
Run 9 stress 0.1192679 
Run 10 stress 0.1183186 
... New best solution
... Procrustes: rmse 1.244871e-05  max resid 3.745684e-05 
... Similar to previous best
Run 11 stress 0.1192686 
Run 12 stress 0.1192683 
Run 13 stress 0.1886532 
Run 14 stress 0.1183186 
... Procrustes: rmse 2.260742e-06  max resid 5.293932e-06 
... Similar to previous best
Run 15 stress 0.1192678 
Run 16 stress 0.1183186 
... Procrustes: rmse 3.225938e-06  max resid 7.314283e-06 
... Similar to previous best
Run 17 stress 0.2075713 
Run 18 stress 0.1192678 
Run 19 stress 0.1192685 
Run 20 stress 0.1183186 
... Procrustes: rmse 2.295609e-05  max resid 6.384852e-05 
... Similar to previous best
*** Solution reached
> ef <- envfit(mod, dune.env, permutations = 99)
> plot(mod)
> plot(ef, p.max = 0.1)
> rm(mod, ef)
> ### end envfit & plot.envfit
> 
> ### protest (& Procrustes analysis): Stability of the permutations and
> ### other results.
> data(mite)
> mod <- rda(mite)
> x <- scores(mod, display = "si", choices=1:6)
> set.seed(4711)
> xp <- x[sample(nrow(x)),]
> pro <- protest(x, xp, permutations = how(nperm = 99))
> pro

Call:
protest(X = x, Y = xp, permutations = how(nperm = 99)) 

Procrustes Sum of Squares (m12 squared):        0.9147 
Correlation in a symmetric Procrustes rotation: 0.292 
Significance:  0.08 

Permutation: free
Number of permutations: 99

> pro$t
 [1] 0.2056649 0.2008622 0.2062525 0.2656158 0.2739148 0.1990895 0.3124461
 [8] 0.2287779 0.2033140 0.2396172 0.1868019 0.2736072 0.1830199 0.2026019
[15] 0.2402570 0.2286169 0.2791609 0.2214468 0.2356083 0.2188325 0.2097262
[22] 0.2596154 0.2560289 0.2190367 0.2174689 0.2438396 0.1991101 0.2374612
[29] 0.2030745 0.2205115 0.2566758 0.1448623 0.2354268 0.2419134 0.3144177
[36] 0.2368505 0.2442661 0.2272011 0.3184241 0.2200089 0.2598430 0.2301587
[43] 0.2763337 0.2332606 0.1935269 0.2315727 0.2573623 0.2021127 0.2387335
[50] 0.2419087 0.2213094 0.2231619 0.2577845 0.2828219 0.2554605 0.2830915
[57] 0.2342396 0.2137396 0.2151201 0.2432896 0.1956238 0.2055716 0.2329736
[64] 0.2086125 0.2039124 0.1955711 0.2038045 0.2358886 0.2579199 0.1808128
[71] 0.2155189 0.2967100 0.2480105 0.2010537 0.2718478 0.2182713 0.2471893
[78] 0.2310223 0.2007771 0.2902640 0.2392380 0.2551756 0.3476679 0.2632614
[85] 0.2289929 0.2222382 0.2503562 0.1983700 0.2084773 0.2406556 0.2478302
[92] 0.2136439 0.3251671 0.2048928 0.3098776 0.2501555 0.2677039 0.2427125
[99] 0.2693285
> rm(x, xp, pro)
> ### end protest
> 
> ### Check that functions related to predict.rda work correctly for all
> ### constrained ordination methods.
> 
> ### simulate.rda/cca/capscale: based on predict.* and the following
> ### should get back the data
> data(dune, dune.env)
> ind <- seq_len(nrow(dune))
> target <- as.matrix(dune)
> ## rda
> mod <- rda(dune ~ Condition(Moisture) + Management + A1, dune.env)
> dat <- simulate(mod, indx = ind)
> all.equal(dat, target, check.attributes = FALSE)
[1] TRUE
> ## cca
> mod <- cca(dune ~ Condition(Moisture) + Management + A1, dune.env)
> dat <- simulate(mod, indx = ind)
> all.equal(dat, target, check.attributes = FALSE)
[1] TRUE
> ## capscale: Euclidean distances -- non-Euclidean distances have an
> ## imaginary component and will not give back the data.
> d <- dist(dune)
> mod <- capscale(d ~ Condition(Moisture) + Management + A1, dune.env)
> dat <- simulate(mod, indx = ind)
> all.equal(dat, d, check.attributes = FALSE)
[1] TRUE
> ## clean up
> rm(ind, target, mod, dat, d)
> ### end simulate.*
> 
> ### test metaMDS works with long expression for comm
> ### originally reported to GLS by Richard Telford
> data(varespec)
> set.seed(1)
> mod <- metaMDS(subset(varespec, select = colSums(varespec) > 0, subset = rowSums(varespec) > 0))
Square root transformation
Wisconsin double standardization
Run 0 stress 0.1843196 
Run 1 stress 0.2455912 
Run 2 stress 0.2169407 
Run 3 stress 0.2313231 
Run 4 stress 0.1974406 
Run 5 stress 0.1858402 
Run 6 stress 0.1948414 
Run 7 stress 0.2265717 
Run 8 stress 0.222507 
Run 9 stress 0.2023215 
Run 10 stress 0.2673177 
Run 11 stress 0.1976151 
Run 12 stress 0.1852397 
Run 13 stress 0.2341085 
Run 14 stress 0.1955867 
Run 15 stress 0.2137409 
Run 16 stress 0.2109638 
Run 17 stress 0.1825658 
... New best solution
... Procrustes: rmse 0.04169825  max resid 0.1521436 
Run 18 stress 0.1843197 
Run 19 stress 0.2570119 
Run 20 stress 0.3760596 
> mod

Call:
metaMDS(comm = subset(varespec, select = colSums(varespec) >      0, subset = rowSums(varespec) > 0)) 

global Multidimensional Scaling using monoMDS

Data:     wisconsin(sqrt(subset(varespec, select = colSums(varespec) > 0, subset = rowSums(varespec) > 0))) 
Distance: bray 

Dimensions: 2 
Stress:     0.1825658 
Stress type 1, weak ties
No convergent solutions - best solution after 20 tries
Scaling: centring, PC rotation, halfchange scaling 
Species: expanded scores based on 'wisconsin(sqrt(subset(varespec, select = colSums(varespec) > 0, subset = rowSums(varespec) > 0)))' 

> rm(mod)
> ### The above should run without error & last lines tests changes to the
> ### printed output
> 
> ## dbrda tests
> 
> ## the following three should be all equal
> data(varespec, varechem)
> (mr <- rda(varespec ~ Al + P + Condition(pH), varechem))
Call: rda(formula = varespec ~ Al + P + Condition(pH), data = varechem)

                Inertia Proportion Rank
Total         1825.6594     1.0000     
Conditional    234.0961     0.1282    1
Constrained    424.4375     0.2325    2
Unconstrained 1167.1258     0.6393   20
Inertia is variance 

Eigenvalues for constrained axes:
  RDA1   RDA2 
314.60 109.84 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
692.3 171.3 106.1  59.9  35.1  30.1  22.4  16.8 
(Showed only 8 of all 20 unconstrained eigenvalues)

> (md <- dbrda(varespec ~ Al + P + Condition(pH), varechem))
Call: dbrda(formula = varespec ~ Al + P + Condition(pH), data =
varechem)

                Inertia Proportion Rank
Total         1825.6594     1.0000     
Conditional    234.0961     0.1282    1
Constrained    424.4375     0.2325    2
Unconstrained 1167.1258     0.6393   20
Inertia is mean squared Euclidean distance 

Eigenvalues for constrained axes:
dbRDA1 dbRDA2 
314.60 109.84 

Eigenvalues for unconstrained axes:
 MDS1  MDS2  MDS3  MDS4  MDS5  MDS6  MDS7  MDS8 
692.3 171.3 106.1  59.9  35.1  30.1  22.4  16.8 
(Showed only 8 of all 20 unconstrained eigenvalues)

> (mc <- capscale(varespec ~ Al + P + Condition(pH), varechem))
Call: capscale(formula = varespec ~ Al + P + Condition(pH), data =
varechem)

                Inertia Proportion Rank
Total         1825.6594     1.0000     
Conditional    234.0961     0.1282    1
Constrained    424.4375     0.2325    2
Unconstrained 1167.1258     0.6393   20
Inertia is mean squared Euclidean distance 

Eigenvalues for constrained axes:
  CAP1   CAP2 
314.60 109.84 

Eigenvalues for unconstrained axes:
 MDS1  MDS2  MDS3  MDS4  MDS5  MDS6  MDS7  MDS8 
692.3 171.3 106.1  59.9  35.1  30.1  22.4  16.8 
(Showed only 8 of all 20 unconstrained eigenvalues)

> ## the following two should be zero (within 1e-15)
> p <- shuffleSet(nrow(varespec), 999)
> range(permustats(anova(mr, permutations=p))$permutations -
+           permustats(anova(md, permutations=p))$permutations)
[1] -1.776357e-15  3.996803e-15
> range(permustats(anova(mr, permutations=p))$permutations -
+           permustats(anova(mc, permutations=p))$permutations)
[1] -1.776357e-15  4.884981e-15
> ## the following two should be equal
> d <- vegdist(wisconsin(sqrt(varespec)))
> (md <- dbrda(d ~ Al + P + Condition(pH), varechem))
Call: dbrda(formula = d ~ Al + P + Condition(pH), data = varechem)

              Inertia Proportion Rank RealDims
Total         2.54753    1.00000              
Conditional   0.18911    0.07423    1         
Constrained   0.39839    0.15638    2        2
Unconstrained 1.96003    0.76939   20       17
Inertia is squared Bray distance 

Eigenvalues for constrained axes:
 dbRDA1  dbRDA2 
0.29646 0.10193 

Eigenvalues for unconstrained axes:
  MDS1   MDS2   MDS3   MDS4   MDS5   MDS6   MDS7   MDS8 
0.4503 0.3031 0.2389 0.1677 0.1495 0.1444 0.1339 0.1112 
(Showed only 8 of all 20 unconstrained eigenvalues)

> (mc <- capscale(d ~ Al + P + Condition(pH), varechem))
Call: capscale(formula = d ~ Al + P + Condition(pH), data = varechem)

               Inertia Proportion Eigenvals Rank
Total          2.54753    1.00000   2.59500     
Conditional    0.18911    0.07423   0.19141    1
Constrained    0.39839    0.15638   0.39920    2
Unconstrained  1.96003    0.76939   2.00439   19
Imaginary                          -0.04747    4
Inertia is squared Bray distance 

Eigenvalues for constrained axes:
   CAP1    CAP2 
0.29718 0.10201 

Eigenvalues for unconstrained axes:
  MDS1   MDS2   MDS3   MDS4   MDS5   MDS6   MDS7   MDS8 
0.4505 0.3032 0.2394 0.1677 0.1504 0.1450 0.1341 0.1113 
(Showed only 8 of all 19 unconstrained eigenvalues)

> (amd <- anova(md, permutations = p))
Permutation test for dbrda under reduced model
Permutation: free
Number of permutations: 999

Model: dbrda(formula = d ~ Al + P + Condition(pH), data = varechem)
         Df SumOfSqs      F Pr(>F)   
Model     2  0.39839 2.0325  0.002 **
Residual 20  1.96003                 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> (amc <- anova(mc, permutations = p))
Permutation test for capscale under reduced model
Permutation: free
Number of permutations: 999

Model: capscale(formula = d ~ Al + P + Condition(pH), data = varechem)
         Df SumOfSqs      F Pr(>F)   
Model     2  0.39839 2.0325  0.002 **
Residual 20  1.96003                 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> ## should be zero (within 1e-15)
> range(permustats(amd)$permutations - permustats(amc)$permutations)
[1] -8.881784e-16  6.661338e-16
> rm(mr, md, mc, d, amd, amc)
> 
> proc.time()
   user  system elapsed 
  9.764   0.072   9.825 
